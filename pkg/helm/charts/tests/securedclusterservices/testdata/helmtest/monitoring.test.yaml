defs: |
  def monitoringExposed(service):
    [service.spec.ports[] | select(.name == "monitoring" and .port == 9090 and .targetPort == "monitoring")]
      | (length == 1);

  def monitoringContainerPortExposed(container):
    [container | if .ports != null then .ports[] else {} end
      | select(.containerPort == 9090 and .name == "monitoring")]
        | (length == 1);

tests:
- name: monitoring should not be exposed by default
  expect: |
    monitoringExposed(.services.sensor) | assertThat(not)
    monitoringContainerPortExposed(container(.deployments.sensor; "sensor")) | assertThat(not)
    .networkpolicys["sensor-monitoring"] | assertThat(. == null)
    monitoringContainerPortExposed(container(.daemonsets.collector; "collector")) | assertThat(not)
    .networkpolicys["collector-monitoring"] | assertThat(. == null)
    .networkpolicys["admission-control-monitoring"] | assertThat(. == null)

- name: monitoring should be exposed when enabled
  set:
    exposeMonitoring: true
  expect: |
    monitoringExposed(.services.sensor)
    monitoringContainerPortExposed(container(.deployments.sensor; "sensor"))
    .networkpolicys["sensor-monitoring"] | assertThat(. != null)
    monitoringContainerPortExposed(container(.daemonsets.collector; "collector"))
    .networkpolicys["collector-monitoring"] | assertThat(. != null)
    .networkpolicys["admission-control-monitoring"] | assertThat(. != null)

- name: monitoring should be overridable on a per-component basis (sensor)
  set:
    exposeMonitoring: true
    sensor.exposeMonitoring: false
  expect: |
    monitoringExposed(.services.sensor) | assertThat(not)
    monitoringContainerPortExposed(container(.deployments.sensor; "sensor")) | assertThat(not)
    .networkpolicys["sensor-monitoring"] | assertThat(. == null)
    monitoringContainerPortExposed(container(.daemonsets.collector; "collector"))
    .networkpolicys["collector-monitoring"] | assertThat(. != null)
    .networkpolicys["admission-control-monitoring"] | assertThat(. != null)

- name: monitoring should be overridable on a per-component basis (collector)
  set:
    exposeMonitoring: true
    collector.exposeMonitoring: false
  expect: |
    monitoringExposed(.services.sensor)
    monitoringContainerPortExposed(container(.deployments.sensor; "sensor"))
    .networkpolicys["sensor-monitoring"] | assertThat(. != null)
    monitoringContainerPortExposed(container(.daemonsets.collector; "collector")) | assertThat(not)
    .networkpolicys["collector-monitoring"] | assertThat(. == null)
    .networkpolicys["admission-control-monitoring"] | assertThat(. != null)

- name: monitoring should be overridable on a per-component basis (admission control)
  set:
    exposeMonitoring: true
    admissionControl.exposeMonitoring: false
  expect: |
    monitoringExposed(.services.sensor)
    monitoringContainerPortExposed(container(.deployments.sensor; "sensor"))
    .networkpolicys["sensor-monitoring"] | assertThat(. != null)
    monitoringContainerPortExposed(container(.daemonsets.collector; "collector"))
    .networkpolicys["collector-monitoring"] | assertThat(. != null)
    .networkpolicys["admission-control-monitoring"] | assertThat(. == null)
