package printer

import (
	"fmt"
	"strings"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/stringutils"
)

const (
	// PodKey is used as key in storage.Alert_Violation_KeyValueAttrs_KeyValueAttr to denote a pod.
	PodKey = "pod"
	// ContainerKey is used as key in storage.Alert_Violation_KeyValueAttrs_KeyValueAttr to denote a container.
	ContainerKey = "container"

	// The following keys are for KeyValueAttrs used by alerts generated by audit log source policies

	// APIVerbKey is used as key in storage.Alert_Violation_KeyValueAttrs_KeyValueAttr to denote the kubernetes API verb.
	APIVerbKey = "Kubernetes API Verb"
	// UsernameKey is used as key in storage.Alert_Violation_KeyValueAttrs_KeyValueAttr to denote the name of the user taking the action.
	UsernameKey = "username"
	// UserGroupsKey is used as key in storage.Alert_Violation_KeyValueAttrs_KeyValueAttr to denote the groups of the user taking the action.
	UserGroupsKey = "user groups"
	// ImpersonatedUsernameKey is used as key in storage.Alert_Violation_KeyValueAttrs_KeyValueAttr to denote the name of the impersonated user taking the action.
	ImpersonatedUsernameKey = "impersonated username"
	// ImpersonatedUserGroupsKey is used as key in storage.Alert_Violation_KeyValueAttrs_KeyValueAttr to denote the groups of the impersonated user taking the action.
	ImpersonatedUserGroupsKey = "impersonated user groups"
	// ResourceURIKey is used as key in storage.Alert_Violation_KeyValueAttrs_KeyValueAttr to denote the resource URI.
	ResourceURIKey = "resource"
	// UserAgentKey is used as key in storage.Alert_Violation_KeyValueAttrs_KeyValueAttr to denote the user agent.
	UserAgentKey = "user agent"
	// IPAddressKey is used as key in storage.Alert_Violation_KeyValueAttrs_KeyValueAttr to denote the IP Address.
	IPAddressKey = "IP address"
)

// GenerateKubeEventViolationMsg constructs violation message for kubernetes event violations.
func GenerateKubeEventViolationMsg(event *storage.KubernetesEvent) *storage.Alert_Violation {
	var message string
	var attrs []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr

	switch event.GetObject().GetResource() {
	case storage.KubernetesEvent_Object_PODS_EXEC:
		message, attrs = podExecViolationMsg(event.GetObject().GetName(), event.GetPodExecArgs())
	case storage.KubernetesEvent_Object_PODS_PORTFORWARD:
		message, attrs = podPortForwardViolationMsg(event.GetObject().GetName(), event.GetPodPortForwardArgs())
	default:
		message, attrs = defaultViolationMsg(event)
	}

	return &storage.Alert_Violation{
		Message: message,
		MessageAttributes: &storage.Alert_Violation_KeyValueAttrs_{
			KeyValueAttrs: &storage.Alert_Violation_KeyValueAttrs{
				Attrs: attrs,
			},
		},
		Type: storage.Alert_Violation_K8S_EVENT,
		Time: event.GetTimestamp(),
	}
}

func defaultViolationMsg(event *storage.KubernetesEvent) (string, []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr) {
	return getDefaultViolationMsgHeader(event), getDefaultViolationMsgViolationAttr(event)
}

func podExecViolationMsg(pod string, args *storage.KubernetesEvent_PodExecArgs) (string, []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr) {
	cmds := stringutils.JoinNonEmpty(" ", args.GetCommands()...)
	return getExecMsgHeader(pod, args.GetContainer(), cmds), getExecMsgViolationAttr(pod, args.GetContainer(), cmds)
}

func podPortForwardViolationMsg(pod string, args *storage.KubernetesEvent_PodPortForwardArgs) (string, []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr) {
	ports := stringutils.JoinInt32(", ", args.GetPorts()...)
	return getPFMsgHeader(pod, ports), getPFMsgViolationAttr(pod, ports)
}

func getDefaultViolationMsgHeader(event *storage.KubernetesEvent) string {
	object := event.GetObject()
	readableResourceName := strings.ToLower(object.Resource.String())

	if object.GetName() == "" {
		return fmt.Sprintf("Access to %s in \"%s / %s\"",
			readableResourceName,
			object.GetClusterId(), // TODO: ROX-7355 Convert this to a name instead of just id once the name is available
			object.GetNamespace())
	}

	return fmt.Sprintf("Access to %s \"%s\" in \"%s / %s\"",
		strings.TrimSuffix(readableResourceName, "s"), // resources are plural but that's incorrect for non-list/watch verbs. Need to change when l10n happens
		object.GetName(),
		object.GetClusterId(), // TODO: ROX-7355 Convert this to a name instead of just id once the name is available
		object.GetNamespace())
}

func getDefaultViolationMsgViolationAttr(event *storage.KubernetesEvent) []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr {
	attrs := make([]*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr, 0, 8)

	// the proto guarantees that this will always have a value (even if it's UNKNOWN)
	attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: APIVerbKey, Value: event.GetApiVerb().String()})

	if event.GetUser() != nil {
		if event.GetUser().GetUsername() != "" {
			attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: UsernameKey, Value: event.GetUser().GetUsername()})
		}
		if len(event.GetUser().GetGroups()) > 0 {
			attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: UserGroupsKey, Value: strings.Join(event.GetUser().GetGroups(), ", ")})
		}
	}

	if event.GetUserAgent() != "" {
		attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: UserAgentKey, Value: event.GetUserAgent()})
	}

	if len(event.GetSourceIps()) > 0 {
		attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: IPAddressKey, Value: strings.Join(event.GetSourceIps(), ", ")})
	}

	if uriParts := strings.Split(event.RequestUri, "?"); len(uriParts) > 0 {
		attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: ResourceURIKey, Value: uriParts[0]})
	}

	if event.GetImpersonatedUser() != nil {
		if event.GetImpersonatedUser().GetUsername() != "" {
			attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: ImpersonatedUsernameKey, Value: event.GetImpersonatedUser().GetUsername()})
		}
		if len(event.GetImpersonatedUser().GetGroups()) > 0 {
			attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: ImpersonatedUserGroupsKey, Value: strings.Join(event.GetImpersonatedUser().GetGroups(), ", ")})
		}
	}
	return attrs
}

func getExecMsgHeader(pod, container, cmds string) string {
	prefix := "Kubernetes API received exec"
	if pod != "" {
		pod = fmt.Sprintf("into pod '%s'", pod)
	}

	if container != "" {
		container = fmt.Sprintf("container '%s'", container)
	}

	if cmds != "" {
		cmds = fmt.Sprintf("'%s'", cmds)
	}
	return stringutils.JoinNonEmpty(" ", prefix, cmds, "request", pod, container)
}

func getExecMsgViolationAttr(pod, container, cmds string) []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr {
	attrs := make([]*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr, 0, 3)
	if pod != "" {
		attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: PodKey, Value: pod})
	}

	if container != "" {
		attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: ContainerKey, Value: container})
	}

	if cmds != "" {
		attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: "commands", Value: cmds})
	}
	return attrs
}

func getPFMsgHeader(pod, ports string) string {
	prefix := "Kubernetes API received port forward request"
	if pod == "" {
		return prefix
	}

	pod = fmt.Sprintf("to pod '%s'", pod)

	if ports != "" {
		ports = fmt.Sprintf("ports '%s'", ports)
	}
	return stringutils.JoinNonEmpty(" ", prefix, pod, ports)
}

func getPFMsgViolationAttr(pod, ports string) []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr {
	attrs := make([]*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr, 0, 2)
	if pod != "" {
		attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: PodKey, Value: pod})
	}

	if ports != "" {
		attrs = append(attrs, &storage.Alert_Violation_KeyValueAttrs_KeyValueAttr{Key: "ports", Value: ports})
	}
	return attrs
}
