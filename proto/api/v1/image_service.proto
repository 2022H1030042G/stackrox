syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

package v1;

enum ImageScanState {
    FAILED    = 0;
    UNSCANNED = 1;
    SCANNING  = 2;
    PENDING   = 3;
    SCANNED   = 4;
    CHECKING  = 5;
    COMPLETED = 6;
}

message ImageLayer {
    string instruction                 = 1;
    string value                       = 2;
    google.protobuf.Timestamp created  = 3;
    string author                      = 4;
}

message ImageMetadata {
    google.protobuf.Timestamp  created = 1;
    string author                      = 2;
    repeated ImageLayer layers         = 3;
}

message License {
    string name = 1;
    string type = 2;
    string url  = 3;
}

message Vulnerability {
    string cve     = 1;
    float cvss     = 2;
    string summary = 3;
}

message ScanLayer {
    string sha                              = 1;
    repeated ImageScanComponents components = 2;
}

message ImageScanComponents {
    string name                  = 1;
    string version               = 2;
    License license              = 3;
    repeated string full_path    = 4; // Unsure if needed
    repeated Vulnerability vulns = 5;
}

message ImageScan {
    string sha                              = 1;
    string registry                         = 2;
    string remote                           = 3;
    string tag                              = 4;
    // This indicates which version of the CVE DB this was scanned against. Used to determine if rescan needed
    string cve_db_identifier                = 5;
    ImageScanState state                    = 6;
    repeated ScanLayer layers               = 7;
    google.protobuf.Timestamp scan_time     = 8;
}

message Image {
    string sha             = 1;
    string registry        = 2;
    string remote          = 3;
    string tag             = 4;

    ImageMetadata metadata = 5;
    ImageScan scan         = 6;
}

message GetImagesRequest {
}

message GetImagesResponse {
    repeated Image images = 1;
}

service ImageService {

    rpc GetImages(GetImagesRequest) returns (GetImagesResponse) {
        option (google.api.http) = {
            get: "/v1/images"
        };
    }

}
