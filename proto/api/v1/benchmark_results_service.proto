syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package v1;

enum CheckStatus {
    INFO = 0;
    WARN = 1;
    NOTE = 2;
    PASS = 3;
}

message CheckResult {
    CheckDefinition definition = 1;
    CheckStatus result         = 2;
    repeated string notes      = 3;
}

message CheckDefinition {
    string name        = 1;
    string description = 2;
}

message BenchmarkResult {
    string id                            = 1;
    string name                          = 2;
    repeated CheckResult results         = 3;
    google.protobuf.Timestamp start_time = 4;
    google.protobuf.Timestamp end_time   = 5;
    string host                          = 6;
    string scan_id                       = 7;
    string cluster_id                    = 8;
}

message GetBenchmarkResultsRequest {
    google.protobuf.Timestamp from_end_time = 1;
    google.protobuf.Timestamp to_end_time   = 2;
    string host                             = 3;
}

message GetBenchmarkResultsResponse {
    repeated BenchmarkResult benchmarks = 1;
}

service BenchmarkResultsService {

    rpc GetBenchmarkResults(GetBenchmarkResultsRequest) returns (GetBenchmarkResultsResponse) {
        option (google.api.http) = {
            get: "/v1/benchmarks/results"
        };
    }

    rpc PostBenchmarkResult(BenchmarkResult) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/benchmarks/results"
            body: "*"
        };
    }
    // No put or delete for benchmark results

}

// The BenchmarkRelayService is used by the agent to receive benchmark results,
// which are then forwarded to the central server.
service BenchmarkRelayService {
    rpc PostBenchmarkResult(BenchmarkResult) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/benchmarks/results"
            body: "*"
        };
    }
}
