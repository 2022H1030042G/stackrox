syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package v1;

enum BenchmarkStatus {
    INFO = 0;
    WARN = 1;
    NOTE = 2;
    PASS = 3;
}

message BenchmarkTestResult {
    BenchmarkStatus result = 1;
    repeated string notes  = 2;
}

message BenchmarkResult {
    BenchmarkTestResult test_result          = 1;
    BenchmarkDefinition benchmark_definition = 2;
}

message BenchmarkDefinition {
    string name        = 1;
    string description = 2;
}

message BenchmarkPayload {
    string id                            = 1;
    repeated BenchmarkResult results     = 2;
    google.protobuf.Timestamp start_time = 3;
    google.protobuf.Timestamp end_time   = 4;
    string host                          = 5;
}

message GetBenchmarksRequest {
    google.protobuf.Timestamp from_end_time = 1;
    google.protobuf.Timestamp to_end_time   = 2;
    string host                             = 3;
}

message GetBenchmarksResponse {
    repeated BenchmarkPayload benchmarks = 1;
}

message BenchmarkSchedule {
    bool enable          = 1;
    int64 interval_days  = 2;
}

message TriggerBenchmarkRequest {}

message GetBenchmarkScheduleResponse {
    bool enabled                             = 1;
    int64 interval_days                      = 2;
    google.protobuf.Timestamp next_scheduled = 3;
}

service BenchmarkService {

    // For now, we will support only 1 schedule, but as our benchmarks are expanded we could potentially target specific benchmarks
    rpc PostBenchmarkSchedule(BenchmarkSchedule) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/benchmarks/schedule"
            body: "*"
        };
    }

    rpc GetBenchmarkSchedule(google.protobuf.Empty) returns (GetBenchmarkScheduleResponse) {
        option (google.api.http) = {
            get: "/v1/benchmarks/schedule"
        };
    }

    rpc TriggerBenchmark(TriggerBenchmarkRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/benchmarks/trigger"
            body: "*"
        };
    }

    rpc GetBenchmarkResults(GetBenchmarksRequest) returns (GetBenchmarksResponse) {
        option (google.api.http) = {
            get: "/v1/benchmarks/results"
        };
    }

    rpc PostBenchmarkResult(BenchmarkPayload) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/benchmarks/results"
            body: "*"
        };
    }

}
