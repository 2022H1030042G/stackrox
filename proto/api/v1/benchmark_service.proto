syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

package v1;

message BenchmarkSchedule {
    bool enable          = 1;
    int64 time_of_day    = 2;
    int64 interval_days  = 3;
}

message TriggerBenchmarkRequest {}

message GetBenchmarkScheduleResponse {
    bool enabled           = 1;
    int64 interval_days    = 2;
    string current_scan_id = 3;
}

message Benchmark {
    string name            = 1;
    bool editable          = 2;
    repeated string checks = 3;
}

message GetBenchmarksRequest {
    string name = 1;
}

message GetBenchmarksResponse {
    repeated Benchmark benchmarks = 1;
}

message DeleteBenchmarkRequest {
    string name = 1;
}

message Check {
    string name = 1;
}

message GetChecksResponse {
    repeated Check checks = 1;
}

service BenchmarkService {

    // For now, we will support only 1 schedule, but as our benchmarks are expanded we could potentially target specific benchmarks
    rpc PostBenchmarkSchedule(BenchmarkSchedule) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/benchmarks/schedule"
            body: "*"
        };
    }

    rpc GetBenchmarkSchedule(google.protobuf.Empty) returns (GetBenchmarkScheduleResponse) {
        option (google.api.http) = {
            get: "/v1/benchmarks/schedule"
        };
    }

    rpc TriggerBenchmark(TriggerBenchmarkRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/benchmarks/trigger"
            body: "*"
        };
    }

    rpc GetChecks(google.protobuf.Empty) returns (GetChecksResponse) {
        option (google.api.http) = {
            get: "/v1/benchmarks/checks"
        };
    }

    rpc GetBenchmarks(GetBenchmarksRequest) returns (GetBenchmarksResponse) {
        option (google.api.http) = {
            get: "/v1/benchmarks/configs"
        };
    }

    rpc PostBenchmark(Benchmark) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/benchmarks/configs"
            body: "*"
        };
    }

    rpc PutBenchmark(Benchmark) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/benchmarks/configs/{name}"
            body: "*"
        };
    }

    rpc DeleteBenchmark(DeleteBenchmarkRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/benchmarks/configs/{name}"
        };
    }

}
