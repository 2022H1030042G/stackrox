// Code generated by MockGen. DO NOT EDIT.
// Source: clienv.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/stackrox/rox/roxctl/common"
	environment "github.com/stackrox/rox/roxctl/common/environment"
	grpc "google.golang.org/grpc"
	reflect "reflect"
	time "time"
)

// MockEnvironment is a mock of Environment interface
type MockEnvironment struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentMockRecorder
}

// MockEnvironmentMockRecorder is the mock recorder for MockEnvironment
type MockEnvironmentMockRecorder struct {
	mock *MockEnvironment
}

// NewMockEnvironment creates a new mock instance
func NewMockEnvironment(ctrl *gomock.Controller) *MockEnvironment {
	mock := &MockEnvironment{ctrl: ctrl}
	mock.recorder = &MockEnvironmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnvironment) EXPECT() *MockEnvironmentMockRecorder {
	return m.recorder
}

// HTTPClient mocks base method
func (m *MockEnvironment) HTTPClient(timeout time.Duration) (common.RoxctlHTTPClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPClient", timeout)
	ret0, _ := ret[0].(common.RoxctlHTTPClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTTPClient indicates an expected call of HTTPClient
func (mr *MockEnvironmentMockRecorder) HTTPClient(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPClient", reflect.TypeOf((*MockEnvironment)(nil).HTTPClient), timeout)
}

// GRPCConnection mocks base method
func (m *MockEnvironment) GRPCConnection() (*grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GRPCConnection")
	ret0, _ := ret[0].(*grpc.ClientConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GRPCConnection indicates an expected call of GRPCConnection
func (mr *MockEnvironmentMockRecorder) GRPCConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GRPCConnection", reflect.TypeOf((*MockEnvironment)(nil).GRPCConnection))
}

// InputOutput mocks base method
func (m *MockEnvironment) InputOutput() environment.IO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputOutput")
	ret0, _ := ret[0].(environment.IO)
	return ret0
}

// InputOutput indicates an expected call of InputOutput
func (mr *MockEnvironmentMockRecorder) InputOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputOutput", reflect.TypeOf((*MockEnvironment)(nil).InputOutput))
}
