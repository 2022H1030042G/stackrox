// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockMitreAttackReadOnlyStore is a mock of MitreAttackReadOnlyStore interface
type MockMitreAttackReadOnlyStore struct {
	ctrl     *gomock.Controller
	recorder *MockMitreAttackReadOnlyStoreMockRecorder
}

// MockMitreAttackReadOnlyStoreMockRecorder is the mock recorder for MockMitreAttackReadOnlyStore
type MockMitreAttackReadOnlyStoreMockRecorder struct {
	mock *MockMitreAttackReadOnlyStore
}

// NewMockMitreAttackReadOnlyStore creates a new mock instance
func NewMockMitreAttackReadOnlyStore(ctrl *gomock.Controller) *MockMitreAttackReadOnlyStore {
	mock := &MockMitreAttackReadOnlyStore{ctrl: ctrl}
	mock.recorder = &MockMitreAttackReadOnlyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMitreAttackReadOnlyStore) EXPECT() *MockMitreAttackReadOnlyStoreMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockMitreAttackReadOnlyStore) GetAll() []*storage.MitreAttackVector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*storage.MitreAttackVector)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockMitreAttackReadOnlyStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMitreAttackReadOnlyStore)(nil).GetAll))
}

// Get mocks base method
func (m *MockMitreAttackReadOnlyStore) Get(id string) (*storage.MitreAttackVector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*storage.MitreAttackVector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMitreAttackReadOnlyStoreMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMitreAttackReadOnlyStore)(nil).Get), id)
}

// MockmitreAttackStore is a mock of mitreAttackStore interface
type MockmitreAttackStore struct {
	ctrl     *gomock.Controller
	recorder *MockmitreAttackStoreMockRecorder
}

// MockmitreAttackStoreMockRecorder is the mock recorder for MockmitreAttackStore
type MockmitreAttackStoreMockRecorder struct {
	mock *MockmitreAttackStore
}

// NewMockmitreAttackStore creates a new mock instance
func NewMockmitreAttackStore(ctrl *gomock.Controller) *MockmitreAttackStore {
	mock := &MockmitreAttackStore{ctrl: ctrl}
	mock.recorder = &MockmitreAttackStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmitreAttackStore) EXPECT() *MockmitreAttackStoreMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockmitreAttackStore) GetAll() []*storage.MitreAttackVector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*storage.MitreAttackVector)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockmitreAttackStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockmitreAttackStore)(nil).GetAll))
}

// Get mocks base method
func (m *MockmitreAttackStore) Get(id string) (*storage.MitreAttackVector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*storage.MitreAttackVector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockmitreAttackStoreMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockmitreAttackStore)(nil).Get), id)
}

// add mocks base method
func (m *MockmitreAttackStore) add(id string, vector *storage.MitreAttackVector) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "add", id, vector)
}

// add indicates an expected call of add
func (mr *MockmitreAttackStoreMockRecorder) add(id, vector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "add", reflect.TypeOf((*MockmitreAttackStore)(nil).add), id, vector)
}
