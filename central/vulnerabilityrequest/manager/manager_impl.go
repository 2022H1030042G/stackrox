package manager

import (
	"context"
	"fmt"
	"time"

	"github.com/pkg/errors"
	imgDataStore "github.com/stackrox/rox/central/image/datastore"
	imgCVEEdgeDataStore "github.com/stackrox/rox/central/imagecveedge/datastore"
	"github.com/stackrox/rox/central/role/resources"
	vulnReqDataStore "github.com/stackrox/rox/central/vulnerabilityrequest/datastore"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/concurrency"
	"github.com/stackrox/rox/pkg/errorhelpers"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/search"
)

var (
	allTagsRegexStr = ".*"
	// Give the processor access as an approver so that it can properly expire
	allAccessCtx             = sac.WithAllAccess(context.Background())
	allVulnApproverAccessSac = sac.WithGlobalAccessScopeChecker(context.Background(),
		sac.AllowFixedScopes(
			sac.AccessModeScopeKeys(storage.Access_READ_ACCESS, storage.Access_READ_WRITE_ACCESS),
			sac.ResourceScopeKeys(resources.VulnerabilityManagementApprovals)))
)

type managerImpl struct {
	images                           imgDataStore.DataStore
	imageCVEEdges                    imgCVEEdgeDataStore.DataStore
	vulnReqs                         vulnReqDataStore.DataStore
	reObserveDeferralsTickerDuration time.Duration

	stopSig concurrency.Signal
	stopped concurrency.Signal
}

func (m *managerImpl) Start() {
	if !features.VulnRiskManagement.Enabled() {
		return
	}
	go m.runExpiredDeferralsProcessor()
}

func (m *managerImpl) Stop() {
	m.stopSig.Signal()
	m.stopped.Wait()
}

// SnoozeVulnerabilityOnRequest snoozes the CVE for the scope specified by the request
// Snoozed vulns won't result in a policy violation nor will it be included in risk calculation.
func (m *managerImpl) SnoozeVulnerabilityOnRequest(ctx context.Context, request *storage.VulnerabilityRequest) error {
	// Only snooze the vulns if the request was approved and not expired
	if request.GetExpired() || request.GetStatus() != storage.RequestStatus_APPROVED {
		return errors.Errorf("vulnerability request %s not approved or expired", request.GetId())
	}

	// Search for images matching the scope instead of image+cve combination.
	// Validation of image-cve existence is performed by the image-cve datastore.
	imageIDs, err := m.getImagesIDsForVulnRequest(request.GetScope())
	if err != nil {
		return errors.Wrapf(err, "could not fetch images matching vulnerability request %s", request.GetId())
	}

	for _, cve := range request.GetCves().GetIds() {
		if err := m.imageCVEEdges.UpdateVulnerabilityState(allAccessCtx, cve, imageIDs, request.GetTargetState()); err != nil {
			return errors.Wrapf(err, "could not un-snooze vulnerabilities for request %s", request.GetId())
		}
	}
	// TODO: (ROX-8186) [BE] All CVEs that are deferred or marked as FP should be excluded from risk calculation
	// TODO: (ROX-8185) [BE] No CVEs that are deferred or marked as FP should not result in a policy violation
	return nil
}

// UnSnoozeVulnerabilityOnRequest unsnoozes the CVE for the scope specified by the request
// unless there is another request that is still active that causes this CVE to remain snoozed
func (m *managerImpl) UnSnoozeVulnerabilityOnRequest(ctx context.Context, request *storage.VulnerabilityRequest) error {
	// Search for images matching the scope instead of image+cve combination.
	// Validation of image-cve existence is performed by the image-cve datastore.
	imageIDs, err := m.getImagesIDsForVulnRequest(request.GetScope())
	if err != nil {
		return errors.Wrapf(err, "could not fetch images matching vulnerability request %s", request.GetId())
	}

	for _, cve := range request.GetCves().GetIds() {
		if err := m.imageCVEEdges.UpdateVulnerabilityState(allAccessCtx, cve, imageIDs, storage.VulnerabilityState_OBSERVED); err != nil {
			return errors.Wrapf(err, "could not un-snooze vulnerabilities for request %s", request.GetId())
		}
	}
	// TODO: Fail out if there exists another request that is still active that causes this CVE to be snoozed
	// TODO: recalculate risk and policy evaluation with the CVE(s) in this request included
	return nil
}

func (m *managerImpl) getImagesIDsForVulnRequest(requestScope *storage.VulnerabilityRequest_Scope) ([]string, error) {
	query, err := requestScopeToQuery(requestScope)
	if err != nil {
		return nil, err
	}
	results, err := m.images.Search(allAccessCtx, query)
	if err != nil {
		return nil, err
	}
	return search.ResultsToIDs(results), nil
}

func requestScopeToQuery(requestScope *storage.VulnerabilityRequest_Scope) (*v1.Query, error) {
	if requestScope.GetGlobalScope() != nil {
		return search.EmptyQuery(), nil
	}

	if imageScope := requestScope.GetImageScope(); imageScope != nil {
		imageName, tag := imageScope.GetName(), imageScope.GetTagRegex()
		if tag == allTagsRegexStr {
			return search.NewQueryBuilder().AddRegexes(
				search.ImageName,
				fmt.Sprintf("%s:%s", imageName, allTagsRegexStr),
			).ProtoQuery(), nil
		}
		return search.NewQueryBuilder().AddExactMatches(
			search.ImageName,
			fmt.Sprintf("%s:%s", imageName, tag),
		).ProtoQuery(), nil
	}
	return nil, errors.New("scope must be provided for a vulnerability request")
}

func (m *managerImpl) getExpiredDeferrals() ([]*storage.VulnerabilityRequest, error) {
	now := fmt.Sprintf("<%s", time.Now().Format("01/02/2006 MST"))
	q := search.NewQueryBuilder().
		AddStrings(search.RequestStatus, storage.RequestStatus_APPROVED.String()). // only expire approved ones
		AddGenericTypeLinkedFields([]search.FieldLabel{search.ExpiredRequest, search.DeferralExpiryTime}, []interface{}{false, now}).
		ProtoQuery()
	results, err := m.vulnReqs.SearchRawRequests(allVulnApproverAccessSac, q)
	if err != nil || len(results) == 0 {
		return nil, err
	}
	return results, nil
}

func (m *managerImpl) reObserveExpiredDeferrals() {
	if m.stopped.IsDone() {
		return
	}

	deferrals, err := m.getExpiredDeferrals()
	if err != nil {
		log.Errorf("error retrieving expired deferral requests for reprocessing: %v", err)
		return
	}
	if len(deferrals) == 0 {
		return
	}

	processingErrs := errorhelpers.NewErrorList("re-observing expired deferrals")
	for _, req := range deferrals {
		// A request can be re-observed by just marking it inactive
		// NOTE: It is possible that another request will still force this vulnerability to be deferred (e.g. if this was image scoped
		// but a global one still exists).
		if _, err := m.vulnReqs.MarkRequestInactive(allVulnApproverAccessSac, req.GetId(), "[System Generated] Request expired"); err != nil {
			processingErrs.AddWrapf(err, "marking as inactive request %s", req.GetId())
		} else {
			if err := m.UnSnoozeVulnerabilityOnRequest(allVulnApproverAccessSac, req); err != nil {
				processingErrs.AddWrapf(err, "unsnoozing vulns for request %s", req.GetId())
			}
			// TODO: Clear from cache(s)
		}
	}

	if err := processingErrs.ToError(); err != nil {
		log.Errorf("Failed to retire expired deferral requests and re-observe associated vulnerabilities with error(s): %+v", err)
	} else {
		log.Infof("Completed retiring %d expired deferral requests and re-observing deferred vulnerabilities", len(deferrals))
	}
}

func (m *managerImpl) runExpiredDeferralsProcessor() {
	defer m.stopped.Signal()
	reObserveDeferralsTicker := time.NewTicker(m.reObserveDeferralsTickerDuration)
	defer reObserveDeferralsTicker.Stop()

	go m.reObserveExpiredDeferrals() // Kick off a run to start with
	for {
		select {
		case <-m.stopSig.Done():
			return
		case <-reObserveDeferralsTicker.C:
			m.reObserveExpiredDeferrals()
		}
	}
}
