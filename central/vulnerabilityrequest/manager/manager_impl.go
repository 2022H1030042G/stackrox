package manager

import (
	"context"

	"github.com/pkg/errors"
	"github.com/stackrox/rox/central/vulnerabilityrequest/datastore"
	"github.com/stackrox/rox/generated/storage"
)

type manager struct {
	datastore datastore.DataStore
}

// SnoozeVulnerabilityOnRequest snoozes the CVE for the scope specified by the request
// Snoozed vulns won't result in a policy violation nor will it be included in risk calculation.
func (m *manager) SnoozeVulnerabilityOnRequest(ctx context.Context, requestID string) error {
	req, found, err := m.datastore.Get(ctx, requestID)
	if err != nil {
		return err
	}
	if !found {
		return errors.Errorf("vulnerability request %s not found", requestID)
	}

	// Only snooze the vulns if the request was fully approved
	if !req.Active && req.Status != storage.RequestStatus_APPROVED {
		return errors.Errorf("vulnerability request %s not approved or not active", requestID)
	}

	// TODO: (ROX-8186) [BE] All CVEs that are deferred or marked as FP should be excluded from risk calculation
	// TODO: (ROX-8185) [BE] No CVEs that are deferred or marked as FP should not result in a policy violation

	return nil
}

// UnSnoozeVulnerabilityOnRequest unsnoozes the CVE for the scope specified by the request
// unless there is another request that is still active that causes this CVE to remain snoozed
func (m *manager) UnSnoozeVulnerabilityOnRequest(ctx context.Context, requestID string) error {
	// TODO: Fail out if there exists another request that is still active that causes this CVE to be snoozed
	// TODO: recalculate risk and policy evaluation with the CVE(s) in this request included
	return nil
}
