package manager

import (
	"context"
	"fmt"
	"testing"
	"time"

	"github.com/blevesearch/bleve"
	"github.com/gogo/protobuf/types"
	componentCVEEdgeDackBox "github.com/stackrox/rox/central/componentcveedge/dackbox"
	componentCVEEdgeIndex "github.com/stackrox/rox/central/componentcveedge/index"
	cveDackbox "github.com/stackrox/rox/central/cve/dackbox"
	cveIndex "github.com/stackrox/rox/central/cve/index"
	"github.com/stackrox/rox/central/globalindex"
	imageDackBox "github.com/stackrox/rox/central/image/dackbox"
	imageDS "github.com/stackrox/rox/central/image/datastore"
	imageIndex "github.com/stackrox/rox/central/image/index"
	componentDackBox "github.com/stackrox/rox/central/imagecomponent/dackbox"
	componentIndex "github.com/stackrox/rox/central/imagecomponent/index"
	imageComponentEdgeDackBox "github.com/stackrox/rox/central/imagecomponentedge/dackbox"
	imageComponentEdgeIndex "github.com/stackrox/rox/central/imagecomponentedge/index"
	imageCVEEdgeDS "github.com/stackrox/rox/central/imagecveedge/datastore"
	"github.com/stackrox/rox/central/ranking"
	vulnReqDS "github.com/stackrox/rox/central/vulnerabilityrequest/datastore"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/concurrency"
	"github.com/stackrox/rox/pkg/dackbox"
	"github.com/stackrox/rox/pkg/dackbox/edges"
	"github.com/stackrox/rox/pkg/dackbox/indexer"
	"github.com/stackrox/rox/pkg/dackbox/utils/queue"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/fixtures"
	"github.com/stackrox/rox/pkg/protoconv"
	"github.com/stackrox/rox/pkg/rocksdb"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils/envisolator"
	"github.com/stackrox/rox/pkg/testutils/rocksdbtest"
	"github.com/stretchr/testify/suite"
)

var (
	allAllowedCtx             = sac.WithAllAccess(context.Background())
	expiryLoopDurationForTest = 5 * time.Second // use a much quicker loop for testing purposes
)

func TestVulnRequestManager(t *testing.T) {
	suite.Run(t, new(VulnRequestManagerTestSuite))
}

type VulnRequestManagerTestSuite struct {
	suite.Suite
	envIsolator *envisolator.EnvIsolator

	db                *rocksdb.RocksDB
	indexQ            queue.WaitableQueue
	bleveIndex        bleve.Index
	vulnReqDataStore  vulnReqDS.DataStore
	imageDataStore    imageDS.DataStore
	imageCVEDataStore imageCVEEdgeDS.DataStore

	manager *managerImpl
}

func (s *VulnRequestManagerTestSuite) SetupSuite() {
	s.db = rocksdbtest.RocksDBForT(s.T())
}

func (s *VulnRequestManagerTestSuite) TearDownSuite() {
	rocksdbtest.TearDownRocksDB(s.db)
}

func (s *VulnRequestManagerTestSuite) SetupTest() {
	s.envIsolator = envisolator.NewEnvIsolator(s.T())
	s.envIsolator.Setenv(features.VulnRiskManagement.EnvVar(), "true")

	bleveIndex, err := globalindex.MemOnlyIndex()
	s.NoError(err)
	s.bleveIndex = bleveIndex

	s.indexQ = queue.NewWaitableQueue()
	dacky, err := dackbox.NewRocksDBDackBox(s.db, s.indexQ, []byte("graph"), []byte("dirty"), []byte("valid"))
	if err != nil {
		s.FailNow("failed to create dackbox", err.Error())
	}

	reg := indexer.NewWrapperRegistry()
	indexer.NewLazy(s.indexQ, reg, bleveIndex, dacky.AckIndexed).Start()
	reg.RegisterWrapper(cveDackbox.Bucket, cveIndex.Wrapper{})
	reg.RegisterWrapper(componentDackBox.Bucket, componentIndex.Wrapper{})
	reg.RegisterWrapper(componentCVEEdgeDackBox.Bucket, componentCVEEdgeIndex.Wrapper{})
	reg.RegisterWrapper(imageDackBox.Bucket, imageIndex.Wrapper{})
	reg.RegisterWrapper(imageComponentEdgeDackBox.Bucket, imageComponentEdgeIndex.Wrapper{})

	imageDataStore := imageDS.New(dacky, concurrency.NewKeyFence(), s.bleveIndex, true, nil, ranking.ImageRanker(), ranking.ComponentRanker())
	if err != nil {
		s.FailNow("failed to create dackbox", err.Error())
	}
	s.imageDataStore = imageDataStore
	s.imageCVEDataStore = imageCVEEdgeDS.New(dacky, concurrency.NewKeyFence(), s.bleveIndex)
	ds, err := vulnReqDS.NewForTestOnly(s.T(), s.db, bleveIndex)
	s.NoError(err)
	s.vulnReqDataStore = ds

	s.manager = &managerImpl{
		images:                           s.imageDataStore,
		imageCVEEdges:                    s.imageCVEDataStore,
		vulnReqs:                         s.vulnReqDataStore,
		reObserveDeferralsTickerDuration: expiryLoopDurationForTest,
		stopSig:                          concurrency.NewSignal(),
		stopped:                          concurrency.NewSignal(),
	}

	if !features.VulnRiskManagement.Enabled() {
		s.T().Skip("Skip vuln management manager test")
		s.T().SkipNow()
	}
}

func (s *VulnRequestManagerTestSuite) TestSnoozeAndUnsnoozeVulns() {
	img := fixtures.GetImage()
	var cvesToDefer []string
	for _, comp := range img.GetScan().GetComponents() {
		if len(comp.GetVulns()) > 0 {
			cvesToDefer = append(cvesToDefer, comp.GetVulns()[0].GetCve())
		}
	}

	err := s.imageDataStore.UpsertImage(allAllowedCtx, img)
	s.NoError(err)

	s.verifyCVEState(storage.VulnerabilityState_OBSERVED, img.GetId(), cvesToDefer...)

	// Dackbox indexing is done lazyly. Therefore, ensure that the indexing is complete.
	indexingDone := concurrency.NewSignal()
	s.indexQ.PushSignal(&indexingDone)
	indexingDone.Wait()

	var reqs []*storage.VulnerabilityRequest
	for _, cve := range cvesToDefer {
		reqs = append(reqs, &storage.VulnerabilityRequest{
			Status: storage.RequestStatus_APPROVED,
			Entities: &storage.VulnerabilityRequest_Cves{
				Cves: &storage.VulnerabilityRequest_CVEs{
					Ids: []string{cve},
				},
			},
			TargetState: storage.VulnerabilityState_DEFERRED,
			Scope: &storage.VulnerabilityRequest_Scope{
				Info: &storage.VulnerabilityRequest_Scope_ImageScope{
					ImageScope: &storage.VulnerabilityRequest_Scope_Image{
						Name:     fmt.Sprintf("%s/%s", img.GetName().GetRegistry(), img.GetName().GetRemote()),
						TagRegex: "latest",
					},
				},
			},
		})
	}

	for _, req := range reqs {
		err := s.manager.SnoozeVulnerabilityOnRequest(allAllowedCtx, req)
		s.NoError(err)
	}

	indexingDone = concurrency.NewSignal()
	s.indexQ.PushSignal(&indexingDone)
	indexingDone.Wait()

	s.verifyCVEState(storage.VulnerabilityState_DEFERRED, img.GetId(), cvesToDefer...)

	for _, req := range reqs {
		err := s.manager.UnSnoozeVulnerabilityOnRequest(allAllowedCtx, req)
		s.NoError(err)
	}

	indexingDone = concurrency.NewSignal()
	s.indexQ.PushSignal(&indexingDone)
	indexingDone.Wait()

	s.verifyCVEState(storage.VulnerabilityState_OBSERVED, img.GetId(), cvesToDefer...)
}

func (s *VulnRequestManagerTestSuite) verifyCVEState(state storage.VulnerabilityState, image string, cves ...string) {
	for _, cve := range cves {
		edgeID := edges.EdgeID{ParentID: image, ChildID: cve}.ToString()
		edge, found, err := s.imageCVEDataStore.Get(allAllowedCtx, edgeID)
		s.NoError(err)
		s.True(found)
		s.Equal(state, edge.GetState())
	}
}

func (s *VulnRequestManagerTestSuite) TestReObserveExpiredDeferralsMarksAllAsInactive() {
	expiredOneDayAgo := protoconv.ConvertTimeToTimestamp(time.Now().Add(-24 * time.Hour))
	expiresInFuture := protoconv.ConvertTimeToTimestamp(time.Now().Add(30 * 24 * time.Hour))

	fpRequest := fixtures.GetGlobalFPRequest("cve-a-b")
	fpRequest.Status = storage.RequestStatus_APPROVED

	cases := []struct {
		name             string
		vulnRequest      *storage.VulnerabilityRequest
		shouldBeActive   bool
		shouldGetComment bool
	}{
		{
			name:             "Active and approved deferral with expiry in past should be marked inactive with comment",
			vulnRequest:      newDeferral("req-active-def", false, storage.RequestStatus_APPROVED, expiredOneDayAgo),
			shouldBeActive:   false,
			shouldGetComment: true,
		},
		{
			name:             "Inactive deferral should remain inactive but with no additional comment",
			vulnRequest:      newDeferral("req-inactive-def", true, storage.RequestStatus_APPROVED, expiredOneDayAgo),
			shouldBeActive:   false,
			shouldGetComment: false,
		},
		{
			name:             "Pending deferral should not be marked as inactive",
			vulnRequest:      newDeferral("req-pending-def", false, storage.RequestStatus_PENDING, expiredOneDayAgo),
			shouldBeActive:   true,
			shouldGetComment: false,
		},
		{
			name:             "Denied deferral should not be marked as inactive",
			vulnRequest:      newDeferral("req-denied-def", false, storage.RequestStatus_DENIED, expiredOneDayAgo),
			shouldBeActive:   true,
			shouldGetComment: false,
		},
		{
			name:             "Deferral with expiry in future should not be marked as inactive",
			vulnRequest:      newDeferral("req-unexpired-def", false, storage.RequestStatus_APPROVED, expiresInFuture),
			shouldBeActive:   true,
			shouldGetComment: false,
		},
		{
			name:             "Deferrals with expires when fixed should not be marked as inactive",
			vulnRequest:      newDeferralExpiresWhenFixed("req-whenfixed-def", false, storage.RequestStatus_APPROVED),
			shouldBeActive:   true,
			shouldGetComment: false,
		},
		{
			name:             "False positive requests should not be marked as inactive",
			vulnRequest:      fpRequest,
			shouldBeActive:   true,
			shouldGetComment: false,
		},
	}
	for _, c := range cases {
		s.T().Run(c.name, func(t *testing.T) {
			err := s.vulnReqDataStore.AddRequest(allAllowedCtx, c.vulnRequest)
			s.NoError(err)

			s.manager.reObserveExpiredDeferrals()

			r, ok, err := s.vulnReqDataStore.Get(allAllowedCtx, c.vulnRequest.GetId())
			s.NoError(err)
			s.True(ok)
			s.Equal(c.shouldBeActive, !r.Expired)

			if c.shouldGetComment {
				s.Len(r.Comments, 1)
				s.Equal(r.Comments[0].Message, "[System Generated] Request expired")
				s.Nil(r.Comments[0].User) // system generated so no user identity
			} else {
				s.Len(r.Comments, 0)
			}
		})
	}
}

func (s *VulnRequestManagerTestSuite) TestProcessorDoesntInactivateOnceStopped() {
	s.manager.Start()
	time.Sleep(expiryLoopDurationForTest) // wait for it to run at least once

	// Now stop it
	s.manager.Stop()

	// Add in a request that should be expired if it wasn't stopped
	req := newDeferral("req", false, storage.RequestStatus_APPROVED, protoconv.ConvertTimeToTimestamp(time.Now().Add(-24*time.Hour)))
	err := s.vulnReqDataStore.AddRequest(allAllowedCtx, req)
	s.NoError(err)

	// Wait again for what would've been two loops
	time.Sleep(expiryLoopDurationForTest * 2)

	// Verify request wasn't marked inactive
	r, ok, err := s.vulnReqDataStore.Get(allAllowedCtx, req.GetId())
	s.NoError(err)
	s.True(ok)
	s.False(r.Expired)
}

func newDeferral(id string, expired bool, status storage.RequestStatus, expiry *types.Timestamp) *storage.VulnerabilityRequest {
	return &storage.VulnerabilityRequest{
		Id:      id,
		Status:  status,
		Expired: expired,
		Req: &storage.VulnerabilityRequest_DeferralReq{
			DeferralReq: &storage.DeferralRequest{
				Expiry: &storage.DeferralRequest_ExpiresOn{ExpiresOn: expiry},
			},
		},
	}
}

func newDeferralExpiresWhenFixed(id string, expired bool, status storage.RequestStatus) *storage.VulnerabilityRequest {
	return &storage.VulnerabilityRequest{
		Id:      id,
		Status:  status,
		Expired: expired,
		Req: &storage.VulnerabilityRequest_DeferralReq{
			DeferralReq: &storage.DeferralRequest{
				Expiry: &storage.DeferralRequest_ExpiresWhenFixed{ExpiresWhenFixed: true},
			},
		},
	}
}
