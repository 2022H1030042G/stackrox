package validator

import (
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stretchr/testify/assert"
)

func TestValidateNewVulnRequest(t *testing.T) {
	req := &storage.VulnerabilityRequest{
		Comments: []*storage.RequestComment{
			{
				Message: "message",
			},
		},
		Status:      storage.RequestStatus_PENDING,
		TargetState: storage.VulnerabilityState_DEFERRED,
		Scope:       getImageScope("stackrox/main", "latest"),
		Entities: &storage.VulnerabilityRequest_Cves{
			Cves: &storage.VulnerabilityRequest_CVEs{
				Ids: []string{"cve1"},
			},
		},
		Req: &storage.VulnerabilityRequest_DeferralReq{
			DeferralReq: &storage.DeferralRequest{
				Expiry: &storage.RequestExpiry{
					Expiry: &storage.RequestExpiry_ExpiresWhenFixed{ExpiresWhenFixed: true},
				},
			},
		},
		Expired: false,
	}
	assert.NoError(t, ValidateNewSuppressVulnRequest(req))

	cloned := req.Clone()
	cloned.TargetState = storage.VulnerabilityState_OBSERVED
	assert.Error(t, ValidateNewSuppressVulnRequest(cloned))

	cloned = req.Clone()
	cloned.Req = nil
	assert.Error(t, ValidateNewSuppressVulnRequest(cloned))

	cloned = req.Clone()
	cloned.Comments = nil
	assert.Error(t, ValidateNewSuppressVulnRequest(cloned))
}

func TestValidateScope(t *testing.T) {
	// Empty image scope
	req := &storage.VulnerabilityRequest{
		Scope: &storage.VulnerabilityRequest_Scope{
			Info: &storage.VulnerabilityRequest_Scope_ImageScope{},
		},
	}
	assert.Error(t, validateScope(req))

	// Invalid image name
	req = &storage.VulnerabilityRequest{
		Scope: getImageScope("+stackrox/main", "latest"),
	}
	assert.Error(t, validateScope(req))

	// Valid image name
	req = &storage.VulnerabilityRequest{
		Scope: getImageScope("stackrox-acs/main", "latest"),
	}
	assert.NoError(t, validateScope(req))

	// Invalid image tag
	req = &storage.VulnerabilityRequest{
		Scope: getImageScope("stackrox/main", "+3.60"),
	}
	assert.Error(t, validateScope(req))

	// Valid image tag
	req = &storage.VulnerabilityRequest{
		Scope: getImageScope("stackrox/main", "3.60"),
	}
	assert.NoError(t, validateScope(req))

	// Supported image tag regex
	req = &storage.VulnerabilityRequest{
		Scope: getImageScope("stackrox/main", ".*"),
	}
	assert.NoError(t, validateScope(req))
}

func getImageScope(imageName, tagRegex string) *storage.VulnerabilityRequest_Scope {
	return &storage.VulnerabilityRequest_Scope{
		Info: &storage.VulnerabilityRequest_Scope_ImageScope{
			ImageScope: &storage.VulnerabilityRequest_Scope_Image{
				Name:     imageName,
				TagRegex: tagRegex,
			},
		},
	}
}
