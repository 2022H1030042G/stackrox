package datastore

import (
	"context"

	"github.com/pkg/errors"
	"github.com/stackrox/rox/central/vulnerabilityrequest/datastore/internal/searcher"
	"github.com/stackrox/rox/central/vulnerabilityrequest/datastore/internal/store"
	"github.com/stackrox/rox/central/vulnerabilityrequest/index"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/search"
)

// DataStore is an intermediary to VulnerabilityRequest storage.
//go:generate mockgen-wrapper
type DataStore interface {
	Search(ctx context.Context, q *v1.Query) ([]search.Result, error)
	SearchRequests(ctx context.Context, q *v1.Query) ([]*v1.SearchResult, error)
	SearchRawRequests(ctx context.Context, q *v1.Query) ([]*storage.VulnerabilityRequest, error)

	Count(ctx context.Context, q *v1.Query) (int, error)
	Exists(ctx context.Context, id string) (bool, error)
	Get(ctx context.Context, id string) (*storage.VulnerabilityRequest, bool, error)
	GetMany(ctx context.Context, ids []string) ([]*storage.VulnerabilityRequest, error)

	AddRequest(ctx context.Context, request *storage.VulnerabilityRequest) error
	UpdateRequestStatus(ctx context.Context, id string, comment string, status storage.RequestStatus) (*storage.VulnerabilityRequest, error)
	MarkRequestInactive(ctx context.Context, id string) (*storage.VulnerabilityRequest, error)
	RemoveRequest(ctx context.Context, id string, force bool) error
}

// New returns a new instance of DataStore using the input store, indexer, and searcher.
func New(storage store.Store, indexer index.Indexer, searcher searcher.Searcher) (DataStore, error) {
	d := &datastoreImpl{
		store:    storage,
		index:    indexer,
		searcher: searcher,
	}

	if err := d.buildIndex(); err != nil {
		return nil, errors.Wrap(err, "failed to build index from existing store")
	}
	return d, nil
}
