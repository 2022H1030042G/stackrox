defaults: &defaults
  docker:
    # This image is the standard circleci/golang:1.9.2 image, plus bazel
    # and other necessary build tools like goimports, dep, yarn, gcloud, kubectl, and envsubst.
    - image: stackrox/apollo:circleci@sha256:5151069b4250092d099909e2da5de530dba3410cacc7b1be81d6c9e4a3adee2b
      auth:
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_PASSWORD
  working_directory: /go/src/bitbucket.org/stack-rox/apollo

restoreNPM: &restoreNPM
  restore_cache:
    keys:
      - v1-prevent-ui-npm-deps-{{ checksum "ui/yarn.lock" }}

restoreDep: &restoreDep
  restore_cache:
    keys:
      - v1-prevent-go-pkg-dep-{{ checksum "Gopkg.lock" }}

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Refresh base image
          command: docker pull alpine:3.7

      - *restoreNPM
      - *restoreDep

      - run:
          name: Setup Bazel cache access
          command: echo "$GKE_SERVICE_ACCOUNT" > /tmp/gcp.json

      - run:
          name: Build all
          command: |
            cat tools/ci-bazel.rc | envsubst > tools/bazel.rc
            make all

      - save-cache:
          key: v1-prevent-ui-npm-deps-{{ checksum "ui/yarn.lock" }}
          paths:
            - ui/node_modules

      - save-cache:
          key: v1-prevent-go-pkg-dep-{{ checksum "Gopkg.lock" }}
          paths:
            - /go/pkg/dep

      - run:
          name: Push new Docker image
          command: |
            docker tag stackrox/prevent:latest stackrox/prevent:$CIRCLE_SHA1
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker push stackrox/prevent:$CIRCLE_SHA1

  deploy-k8s:
    <<: *defaults
    environment:
      - LOCAL_PORT: 8000
    steps:
      - checkout
      - setup_remote_docker

      - *restoreNPM
      - *restoreDep

      - run: make deps generated-srcs

      - run:
          name: Setup deployment env
          command: |
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            echo 'export REGISTRY_USERNAME="$DOCKERHUB_USERNAME"' >> $BASH_ENV
            echo 'export REGISTRY_PASSWORD="$DOCKERHUB_PASSWORD"' >> $BASH_ENV
            echo 'export PREVENT_IMAGE_TAG="$CIRCLE_SHA1"' >> $BASH_ENV
            echo $GKE_SERVICE_ACCOUNT > /tmp/gcp.json
            echo 'export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp.json' >> $BASH_ENV
            gcloud auth activate-service-account --key-file /tmp/gcp.json
            gcloud config set project ultra-current-825
            gcloud config set compute/zone us-central1-f

      - run:
          name: Create GKE cluster
          command: |
            gcloud container clusters create --machine-type n1-standard-1 --num-nodes 2 "mitigate-ci-${CIRCLE_BUILD_NUM}"

      # See https://stackoverflow.com/a/46316672 for why we have to use user/pass.
      # This step requires the GCP IAM permission "Kubernetes Engine Admin".
      - run:
          name: Deploy to remote cluster
          command: |
            kubectl \
              --username="$(gcloud container clusters describe "mitigate-ci-${CIRCLE_BUILD_NUM}" --format json | jq -r .masterAuth.username)" \
              --password="$(gcloud container clusters describe "mitigate-ci-${CIRCLE_BUILD_NUM}" --format json | jq -r .masterAuth.password)" \
              create clusterrolebinding stackrox-admin --clusterrole=cluster-admin --serviceaccount=stackrox:default
            ./deploy/k8s/deploy.sh

      - run:
          name: Setup port-forwarding for tests
          command: ./scripts/k8s/local-port-forward.sh
          background: true

      - run:
          name: Wait for the API server to be up
          command: |
            export PING_URL=https://127.0.0.1:${LOCAL_PORT}/v1/ping
            curl -k --connect-timeout 5 --max-time 10 --retry 10 --retry-connrefused --retry-delay 1 --retry-max-time 30 ${PING_URL}

      - run:
          name: API tests
          command: |
            export API_ENDPOINT=localhost:${LOCAL_PORT}
            make -C tests

      - run:
          name: UI e2e tests
          command: |
            export UI_BASE_URL=https://localhost:${LOCAL_PORT}
            make -C ui test-e2e-ci

      - run:
          name: Tear down GKE cluster
          command: |
            gcloud container clusters delete --async "mitigate-ci-${CIRCLE_BUILD_NUM}"
          when: always

      - store_test_results:
          path: ui/cypress/reports

      - store_artifacts:
          path: ui/cypress/videos
          destination: ui-e2e-videos

      - store_artifacts:
          path: ui/cypress/screenshots
          destination: ui-e2e-screenshots

  retag:
    docker:
      - image: circleci/golang:1.9.2
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - setup_remote_docker

      - run:
          name: Retag
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker pull stackrox/prevent:$CIRCLE_SHA1
            docker tag stackrox/prevent:$CIRCLE_SHA1 stackrox/prevent:latest
            docker push stackrox/prevent:latest

workflows:
  version: 2
  build_all:
    jobs:
      - build
      - deploy-k8s:
          requires:
            - build
      - retag:
          requires:
            - build
          filters:
            branches:
              only:
                - master
