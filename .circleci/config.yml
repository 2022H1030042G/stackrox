defaults: &defaults
  docker:
    # This image is the standard circleci/golang:1.10.3 image, plus bazel
    # and other necessary build tools like goimports, dep, yarn, gcloud, kubectl, envsubst and gradle.
    - image: stackrox/apollo-ci:0.1.9
      auth:
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_PASSWORD
  working_directory: /go/src/bitbucket.org/stack-rox/apollo

restoreUI: &restoreUI
  restore_cache:
    keys:
      - v1-prevent-ui-deps-{{ checksum "ui/yarn.lock" }}
      - v1-prevent-ui-deps

restoreDep: &restoreDep
  restore_cache:
    keys:
      - v1-prevent-go-pkg-dep-{{ checksum "Gopkg.lock" }}

version: 2
jobs:
  build:
    <<: *defaults
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Refresh base image
          command: docker pull alpine:3.8

      - *restoreDep
      - *restoreUI

      - run:
          name: Setup Bazel cache access
          command: echo "$GKE_SERVICE_ACCOUNT" > /tmp/gcp.json

      - run:
          name: Substitute env variables into bazel.rc
          command: cat tools/ci-bazel.rc | envsubst > tools/bazel.rc

      - run:
          name: Build image
          command: make image

      - run:
          name: Push new Docker image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker push stackrox/prevent:$(git describe --tags --abbrev=10 --dirty)
            docker push stackrox/prevent-health:$(git describe --tags --abbrev=10 --dirty)

      - run:
          name: Run style checks and unit tests
          command: make style test

      - save-cache:
          key: v1-prevent-ui-deps-{{ checksum "ui/yarn.lock" }}
          paths:
            - ui/node_modules
            - ~/.cache/Cypress # Cypress binary will be put there, see https://docs.cypress.io/guides/guides/continuous-integration.html#Example-circle-yml-v2-config-file-with-yarn

      - save-cache:
          key: v1-prevent-go-pkg-dep-{{ checksum "Gopkg.lock" }}
          paths:
            - /go/pkg/dep

      - persist_to_workspace:
          root: /go/src/bitbucket.org/stack-rox/apollo
          paths:
          - deps
          - generated
          - ui/deps
          - vendor

      - store_artifacts:
          path: qa-tests-backend/build/reports/codenarc
          destination: reports/codenarc

  deploy-k8s:
    <<: *defaults
    environment:
      - LOCAL_PORT: 8000
    steps:
      - checkout
      - setup_remote_docker

      - attach_workspace:
          at: /go/src/bitbucket.org/stack-rox/apollo

      - run:
          name: Setup deployment env
          command: |
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            echo 'export REGISTRY_USERNAME="$DOCKERHUB_USERNAME"' >> $BASH_ENV
            echo 'export REGISTRY_PASSWORD="$DOCKERHUB_PASSWORD"' >> $BASH_ENV
            echo 'export PREVENT_IMAGE_TAG="$(git describe --tags --abbrev=10 --dirty)"' >> $BASH_ENV
            echo $GKE_SERVICE_ACCOUNT > /tmp/gcp.json
            echo 'export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp.json' >> $BASH_ENV
            gcloud auth activate-service-account --key-file /tmp/gcp.json
            gcloud config set project ultra-current-825
            gcloud config set compute/zone us-central1-f

      - run:
          name: Create GKE cluster
          command: |
            gcloud container clusters create \
              --machine-type n1-standard-2 \
              --num-nodes 2 \
              --create-subnetwork range=/19 \
              --enable-ip-alias \
              --enable-network-policy \
              "prevent-ci-${CIRCLE_BUILD_NUM}"

      # See https://stackoverflow.com/a/46316672 for why we have to use user/pass.
      # This step requires the GCP IAM permission "Kubernetes Engine Admin".
      - run:
          name: Deploy to remote cluster
          command: |
            ./deploy/k8s/deploy.sh

      - run:
          name: Setup port-forwarding for tests
          command: ./scripts/k8s/local-port-forward.sh
          background: true

      - run:
          name: Wait for the API server to be up
          command: |
            export PING_URL=https://127.0.0.1:${LOCAL_PORT}/v1/ping
            curl -k --connect-timeout 5 --max-time 10 --retry 10 --retry-connrefused --retry-delay 1 --retry-max-time 30 ${PING_URL}

      - run:
          name: Wait for the Sensor to be running K8s
          command: |
            ./scripts/ci/sensor-wait.sh

      - run:
          name: API tests
          command: |
            export API_ENDPOINT=localhost:${LOCAL_PORT}
            make -C tests

      - *restoreUI

      - run:
          name: UI e2e tests
          command: |
            export UI_BASE_URL=https://localhost:${LOCAL_PORT}
            make -C ui test-e2e-ci

      - run:
          name: Collect k8s logs
          command: |
            ./scripts/ci/collect-service-logs.sh central
            ./scripts/ci/collect-service-logs.sh sensor
          when: always

      - store_artifacts:
          path: /tmp/k8s-service-logs
          destination: k8s-service-logs

      - run:
          name: Tear down GKE cluster
          command: |
            gcloud container clusters delete --async "prevent-ci-${CIRCLE_BUILD_NUM}"
          when: always

      - store_test_results:
          path: ui/cypress/reports

      - store_artifacts:
          path: ui/cypress/videos
          destination: ui-e2e-videos

      - store_artifacts:
          path: ui/cypress/screenshots
          destination: ui-e2e-screenshots

  push-release:
    <<: *defaults
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Push image into stackrox.io
          command: |
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD" stackrox.io

            docker pull stackrox/prevent:$(git describe --tags --abbrev=10 --dirty)
            docker tag stackrox/prevent:$(git describe --tags --abbrev=10 --dirty) stackrox.io/prevent:$(git describe --tags --abbrev=10 --dirty)
            docker push stackrox.io/prevent:$(git describe --tags --abbrev=10 --dirty)

            docker pull stackrox/prevent-health:$(git describe --tags --abbrev=10 --dirty)
            docker tag stackrox/prevent-health:$(git describe --tags --abbrev=10 --dirty) stackrox.io/prevent-health:$(git describe --tags --abbrev=10 --dirty)
            docker push stackrox.io/prevent-health:$(git describe --tags --abbrev=10 --dirty)


workflows:
  version: 2
  build_all:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - deploy-k8s:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      # Push release only on tags.
      - push-release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
