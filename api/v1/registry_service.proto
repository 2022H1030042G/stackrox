syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "api/v1/common.proto";

package v1;

message Registry {
    string id                  = 1;
    string name                = 2;
    string type                = 3;
    string endpoint            = 4;
    map<string, string> config = 5;
    // If a list of clusters is provided, the integration will only be accessed from the specified clusters' sensors.
    repeated string clusters   = 6;
}

message GetRegistriesRequest {
    string name    = 1;
    string cluster = 2;
}

message GetRegistriesResponse {
    repeated Registry registries = 1;
}

service RegistryService {

    rpc GetRegistry(ResourceByID) returns (Registry) {
        option (google.api.http) = {
            get: "/v1/registries/{id}"
        };
    }

    rpc GetRegistries(GetRegistriesRequest) returns (GetRegistriesResponse) {
        option (google.api.http) = {
            get: "/v1/registries"
        };
    }

    rpc PostRegistry(Registry) returns (Registry) {
        option (google.api.http) = {
            post: "/v1/registries"
            body: "*"
        };
    }

    rpc PutRegistry(Registry) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/registries/{id}"
            body: "*"
        };
    }

    rpc TestRegistry(Registry) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/registries/test"
            body: "*"
        };
    }

    rpc DeleteRegistry(ResourceByID) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/registries/{id}"
        };
    }

}
