syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "api/v1/common.proto";
import "api/v1/configuration_policy.proto";
import "api/v1/image_policy.proto";
import "api/v1/privilege_policy.proto";
import "api/v1/image_service.proto";
import "api/v1/deployment_service.proto";
import "api/v1/search_service.proto";

package v1;

message Whitelist {
    string                    name       = 1;
    message Container {
        ImageName image_name = 3;
    }
    Container                 container  = 2;
    message Deployment {
        string                name       = 3;
        Scope                 scope      = 4;
    }
    Deployment                deployment = 5;
    google.protobuf.Timestamp expiration = 6;
}

message Policy {
    string id                                   = 1;
    string name                                 = 2;
    Severity severity                           = 3;
    string description                          = 4;
    string rationale                            = 5;
    string remediation                          = 6;
    bool disabled                               = 7;
    repeated string categories                  = 8;
    repeated Scope scope                        = 9;
    EnforcementAction enforcement               = 10;

    repeated string notifiers                   = 11;

    ImagePolicy image_policy                    = 12;
    PrivilegePolicy privilege_policy            = 13;
    ConfigurationPolicy configuration_policy    = 14;

    repeated Whitelist whitelists               = 15;
}

message PoliciesResponse {
    repeated Policy policies = 1;
}

message DryRunResponse {
    message Alert {
        string deployment          = 1;
        repeated string violations = 2;
    }
    repeated Alert alerts = 1;
    message Excluded {
        string deployment   = 1;
        Whitelist whitelist = 2;
    }
    repeated Excluded excluded     = 2;
}

message PolicyCategoriesResponse {
    repeated string categories = 1;
}

message RenamePolicyCategoryRequest {
    string old_category = 1;
    string new_category = 2;
}

message DeletePolicyCategoryRequest {
    string category = 1;
}

service PolicyService {

    rpc GetPolicy (ResourceByID) returns (Policy) {
        option (google.api.http) = {
            get: "/v1/policies/{id}"
        };
    }

    rpc GetPolicies (RawQuery) returns (PoliciesResponse) {
        option (google.api.http) = {
            get: "/v1/policies"
        };
    }

    rpc PostPolicy (Policy) returns (Policy) {
        option (google.api.http) = {
            post: "/v1/policies"
            body: "*"
        };
    }

    rpc PutPolicy (Policy) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/policies/{id}"
            body: "*"
        };
    }

    rpc DeletePolicy (ResourceByID) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/policies/{id}"
        };
    }

    rpc ReassessPolicies (google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/policies/reassess"
        };
    }

    rpc DryRunPolicy (Policy) returns (DryRunResponse) {
        option (google.api.http) = {
            post: "/v1/policies/dryrun"
            body: "*"
        };
    }

    rpc GetPolicyCategories (google.protobuf.Empty) returns (PolicyCategoriesResponse) {
        option (google.api.http) = {
            get: "/v1/policyCategories"
        };
    }

    rpc RenamePolicyCategory (RenamePolicyCategoryRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/policyCategories/{old_category}"
            body: "*"
        };
    }

    rpc DeletePolicyCategory (DeletePolicyCategoryRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/policyCategories/{category}"
        };
    }
}