syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "api/v1/common.proto";
import "api/v1/search_service.proto";

package v1;

message Namespace {
    string              id           = 1;
    string              name         = 2;
    string              cluster_id   = 3;
    string              cluster_name = 4;
    map<string, string> labels       = 5;
}

message LabelSelector {
    map<string, string> match_labels = 1;
}

message IPBlock {
    string          cidr   = 1;
    repeated string except = 2;
}

message NetworkPolicyPeer {
    LabelSelector pod_selector       = 1;
    LabelSelector namespace_selector = 2;
    IPBlock       ip_block           = 3;
}

enum Protocol {
    UNSET_PROTOCOL = 0;
    TCP_PROTOCOL   = 1;
    UDP_PROTOCOL   = 2;
}

message NetworkPolicyPort {
    Protocol protocol = 1;
    int32    port     = 2;
}

message NetworkPolicyIngressRule {
    repeated NetworkPolicyPort ports = 1;
    repeated NetworkPolicyPeer from  = 2;
}

message NetworkPolicyEgressRule {
    repeated NetworkPolicyPort ports = 1;
    repeated NetworkPolicyPeer to    = 2;
}

enum NetworkPolicyType {
    UNSET_NETWORK_POLICY_TYPE   = 0;
    INGRESS_NETWORK_POLICY_TYPE = 1;
    EGRESS_NETWORK_POLICY_TYPE  = 2;
}

message NetworkPolicySpec {
    LabelSelector                     pod_selector = 1;
    repeated NetworkPolicyIngressRule ingress      = 2;
    repeated NetworkPolicyEgressRule  egress       = 3;
    repeated NetworkPolicyType        policy_types = 4;
}

message NetworkPolicy {
    string              id            = 1;
    string              name          = 2;
    string              cluster_id    = 3;
    string              cluster_name  = 4;
    string              namespace     = 5;
    map<string, string> labels        = 6;
    map<string, string> annotations   = 7;

    NetworkPolicySpec   spec          = 8;
}

message NetworkPoliciesResponse {
    repeated NetworkPolicy network_policies = 1;
}

message NetworkEdge {
    string          source       = 1;
    string          target       = 2;
    repeated string policy_names = 3;
    int32 value = 4;
}

message NetworkNode {
    string id    = 1;
    int32  group = 2;
}

message GetNetworkGraphResponse {
    repeated NetworkNode nodes = 1;
    repeated NetworkEdge edges = 2;
}

service NetworkPolicyService {

    rpc GetNetworkPolicy(ResourceByID) returns (NetworkPolicy) {
        option (google.api.http) = {
            get: "/v1/networkpolicies/{id}"
        };
    }

    rpc ListNetworkPolicies(google.protobuf.Empty) returns (NetworkPoliciesResponse) {
        option (google.api.http) = {
            get: "/v1/networkpolicies"
        };
    }

    rpc GetNetworkGraph(RawQuery) returns (GetNetworkGraphResponse) {
        option (google.api.http) = {
            get: "/v1/networkgraph"
        };
    }

}